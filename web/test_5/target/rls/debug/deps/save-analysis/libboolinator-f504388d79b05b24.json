{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0","program":"C:\\Users\\52500\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","boolinator","C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f504388d79b05b24","-C","extra-filename=-f504388d79b05b24","--out-dir","c:\\code_file\\Price-analyzer\\web\\test_5\\target\\rls\\debug\\deps","-L","dependency=c:\\code_file\\Price-analyzer\\web\\test_5\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\52500\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\code_file\\Price-analyzer\\web\\test_5\\target\\rls\\debug\\deps\\libboolinator-f504388d79b05b24.rmeta"},"prelude":{"crate_id":{"name":"boolinator","disambiguator":[1743619730761200792,10532704955622254568]},"crate_root":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src","external_crates":[{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}}],"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":362,"byte_end":7249,"line_start":10,"line_end":260,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":362,"byte_end":7249,"line_start":10,"line_end":260,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":29}],"decl_id":null,"docs":"Provides the [`Boolinator`](trait.Boolinator.html) trait, which lets you use `Option` and `Result`-style combinators with `bool`s.","sig":null,"attributes":[{"value":"*\n\nProvides the [`Boolinator`](trait.Boolinator.html) trait, which lets you use `Option` and `Result`-style combinators with `bool`s.\n\n<style type=\"text/css\">\n.link-block { font-family: \"Fira Sans\"; }\n.link-block > p { display: inline-block; }\n.link-block > p > strong { font-weight: 500; margin-right: 1em; }\n.link-block > ul { display: inline-block; padding: 0; list-style: none; }\n.link-block > ul > li {\n  font-size: 0.8em;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  padding: 0.3em;\n  display: inline-block;\n}\n</style>\n<span></span><div class=\"link-block\">\n\n**Links**\n\n* [Latest Release](https://crates.io/crates/boolinator/)\n* [Latest Docs](https://danielkeep.github.io/rust-boolinator/doc/boolinator/index.html)\n* [Repository](https://github.com/DanielKeep/rust-boolinator)\n\n<span></span></div>\n\n## Compatibility\n\n`boolinator` is tested against Rust 1.0+.  *Exhaustively* so.\n\n*/","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":362,"byte_end":1260,"line_start":10,"line_end":41,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1304,"byte_end":1326,"line_start":43,"line_end":43,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1516,"byte_end":1526,"line_start":50,"line_end":50,"column_start":11,"column_end":21},"name":"Boolinator","qualname":"::Boolinator","value":"Boolinator: Sized","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":28}],"decl_id":null,"docs":"This trait defines a number of combinator-style methods for use with `bool` values.","sig":null,"attributes":[{"value":"*\nThis trait defines a number of combinator-style methods for use with `bool` values.\n\nIn general, `true`/`false` map to `Some(_)`/`None` and `Ok(_)`/`Err(_)` respectively.\n*/","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1328,"byte_end":1505,"line_start":45,"line_end":49,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1625,"byte_end":1634,"line_start":54,"line_end":54,"column_start":8,"column_end":17},"name":"as_option","qualname":"::Boolinator::as_option","value":"pub fn as_option(Self) -> Option<()>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Some(())`; `None` otherwise.\n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Some(())`; `None` otherwise.\n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":51,"line_end":53,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":5},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1748,"byte_end":1755,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"as_some","qualname":"::Boolinator::as_some","value":"pub fn as_some<T>(Self, T) -> Option<T>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Some(some)`; `None` otherwise.\n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Some(some)`; `None` otherwise.\n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1661,"byte_end":1740,"line_start":56,"line_end":58,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1883,"byte_end":1895,"line_start":64,"line_end":64,"column_start":8,"column_end":20},"name":"as_some_from","qualname":"::Boolinator::as_some_from","value":"pub fn as_some_from<T, F>(Self, F) -> Option<T> where F: FnOnce() -> T","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Some(some())`; `None` otherwise. \n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Some(some())`; `None` otherwise. \n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1793,"byte_end":1875,"line_start":61,"line_end":63,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2044,"byte_end":2054,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"and_option","qualname":"::Boolinator::and_option","value":"pub fn and_option<T>(Self, Option<T>) -> Option<T>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `opt`; `None` otherwise. \n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `opt`; `None` otherwise. \n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1963,"byte_end":2036,"line_start":67,"line_end":69,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2182,"byte_end":2197,"line_start":75,"line_end":75,"column_start":8,"column_end":23},"name":"and_option_from","qualname":"::Boolinator::and_option_from","value":"pub fn and_option_from<T, F>(Self, F) -> Option<T> where F: FnOnce() ->\nOption<T>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `opt()`; `None` otherwise. \n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `opt()`; `None` otherwise. \n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2099,"byte_end":2174,"line_start":72,"line_end":74,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2360,"byte_end":2369,"line_start":81,"line_end":81,"column_start":8,"column_end":17},"name":"as_result","qualname":"::Boolinator::as_result","value":"pub fn as_result<T, E>(Self, T, E) -> Result<T, E>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Ok(ok)`; `Err(err)` otherwise. \n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Ok(ok)`; `Err(err)` otherwise. \n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2272,"byte_end":2352,"line_start":78,"line_end":80,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2511,"byte_end":2525,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"as_result_from","qualname":"::Boolinator::as_result_from","value":"pub fn as_result_from<T, E, F, G>(Self, F, G) -> Result<T, E> where\nF: FnOnce() -> T, G: FnOnce() -> E","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Ok(ok())`; `Err(err())` otherwise. \n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Ok(ok())`; `Err(err())` otherwise. \n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2419,"byte_end":2503,"line_start":83,"line_end":85,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2713,"byte_end":2718,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"ok_or","qualname":"::Boolinator::ok_or","value":"pub fn ok_or<E>(Self, E) -> Result<(), E>","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Ok(())`; `Err(err)` otherwise.\n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Ok(())`; `Err(err)` otherwise.\n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2626,"byte_end":2705,"line_start":89,"line_end":91,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2848,"byte_end":2858,"line_start":97,"line_end":97,"column_start":8,"column_end":18},"name":"ok_or_else","qualname":"::Boolinator::ok_or_else","value":"pub fn ok_or_else<E, G>(Self, G) -> Result<(), E> where G: FnOnce() -> E","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, returns `Ok(())`; `Err(err())` otherwise.\n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, returns `Ok(())`; `Err(err())` otherwise.\n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2759,"byte_end":2840,"line_start":94,"line_end":96,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":3019,"byte_end":3025,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"expect","qualname":"::Boolinator::expect","value":"pub fn expect(Self, &str)","parent":{"krate":0,"index":3},"children":[],"decl_id":null,"docs":"    If this value is `true`, panics with `msg`; does nothing otherwise.\n","sig":null,"attributes":[{"value":"*\n    If this value is `true`, panics with `msg`; does nothing otherwise.\n    */","span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":2929,"byte_end":3011,"line_start":100,"line_end":102,"column_start":5,"column_end":7}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\52500\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\boolinator-2.4.0\\src\\lib.rs","byte_start":1528,"byte_end":1533,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2837},"to":{"krate":0,"index":3}}]}